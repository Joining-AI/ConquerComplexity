# 治理：理解系统复杂性

> 治理（Governance）: 确保和验证架构内的资产和工件按预期行为，并维护一定的质量水平。
>
> 治理就是让产品能够符合预期地稳定运行，并能够持续保持在一定的质量水平上。
>
> —— Gartner, [Magic Quadrant for SOA Governance](https://www.gartner.com/en/documents/1824514/magic-quadrant-for-soa-governance-technologies), 2007

在微服务架构的讨论中，一个核心话题就是系统的复杂性。复杂性的讨论不仅包括了微服务的复杂性本身，还涵盖了如何量化复杂性以及应对策略。尽管找到一个完美解决所有复杂性问题的方案几乎不可能，但是对复杂性的正确理解能够帮助我们更加有效地解决实际问题。

## 静态的治理

在探讨静态的治理时，我们通过比较不同规模和复杂度的系统（如蜂群、饭馆、国家），来阐明系统运作的复杂度越高，治理的难度也越大。特别是在微服务架构中，数百上千的微服务相互调用和依赖，正常运行的确立基于有效的治理。

## 复杂性的来源

复杂性主要来源于两个方面：**认知负荷**和**协作成本**。

- **认知负荷（Cognitive Load）**：涉及到理解业务、概念、模型、设计、接口、代码等信息所带来的负担。高认知负荷意味着系统更复杂。
  
- **协作成本（Collaboration Cost）**：体现为团队研发时的沟通、管理成本。高协作成本也意味着更高的系统复杂性。

微服务的认知负荷相对较高，但协作成本较低。当系统规模增大时，单体架构的复杂度增长速度超过微服务架构，这支持了“软件规模小时微服务的复杂度高于单体系统，规模大时则相反”的观点。

## 发展的治理

在动态发展方面，持续保持软件系统的一定质量是一项挑战。架构腐化是难以避免的，但可以通过演进式设计来延缓。演进式设计强调了软件开发过程中的逐步演进和不断适应，与生物进化有相似之处。它不仅是建设的过程，也包括必要的破坏和重建，确保系统能够持续满足用户的需要并应对复杂性的增长。

演进式设计是对传统静态治理方法的补充，帮助架构师控制和管理复杂性，适应生产力的变化，调整生产关系，从而更有效地治理软件系统。

---
[原文出处](https://icyfenix.cn/methodology/forward-msa/governance.html)
